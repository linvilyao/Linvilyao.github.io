<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test-blog</title>
    <url>/2023/04/22/test-blog/</url>
    <content><![CDATA[<p>hello world!</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（一~四）</title>
    <url>/2023/04/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80~%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第一章绪论"><a href="#第一章绪论" class="headerlink" title="第一章绪论"></a>第一章绪论</h1><h2 id="第一节基本概念"><a href="#第一节基本概念" class="headerlink" title="第一节基本概念"></a>第一节基本概念</h2><p>数据：是信息的载体</p>
<p>数据对象：具有<strong>相同性质</strong>的数据元素的集合，是数据的一个子集</p>
<p>数据元素：是数据的<strong>基本单位</strong>，通常作为一个整体进行考虑和处理</p>
<p>数据项：是构成数据元素的不可分割的<strong>最小单位</strong></p>
<p>数据结构：是指相互之间存在<strong>一种或者多种特定关系</strong>的数据元素的集合</p>
<p>数据类型：原子类型（bool，int…）、结构类型（struct Coordinate{	int x; int y;}; ）</p>
<p>抽象数据类型（ADT）：抽象数据组织及与之相关的操作</p>
<h2 id="第二节三要素"><a href="#第二节三要素" class="headerlink" title="第二节三要素"></a>第二节三要素</h2><h3 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1.逻辑结构"></a>1.逻辑结构</h3><p>集合结构：各个元素同属于一个集合，并无其他关系</p>
<p>线性结构：一对一关系，除第一个元素，所有元素都有唯一前驱；除最后一个元素，所有元素都有唯一后继</p>
<p>树形结构：一对多关系，例：思维导图、文件夹</p>
<p>网状结构：多对多关系，例：道路信息，朋友圈关系</p>
<h3 id="2-数据的运算"><a href="#2-数据的运算" class="headerlink" title="2.数据的运算"></a>2.数据的运算</h3><p>——针对某种逻辑结构，结合实际需求，定义基本运算</p>
<h3 id="3-物理结构（存储结构）"><a href="#3-物理结构（存储结构）" class="headerlink" title="3.物理结构（存储结构）"></a>3.物理结构（存储结构）</h3><p>——如何用计算机表示数据元素的逻辑关系</p>
<p>顺序存储：把<strong>逻辑上相邻的元素存储在物理位置上也相邻的存储单元</strong>中，元素之间的关系由存储单元的邻接关系来体现</p>
<p>链式存储：<strong>逻辑上相邻的元素在物理位置上可以不相邻</strong>，借助指示元素存储地址的<strong>指针</strong>来表示元素之间的逻辑关系</p>
<p>索引存储：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字，地址）</p>
<p>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储</p>
<p><em>小结：</em></p>
<p><em>1）若采用<strong>顺序存储</strong>，则各个数据元素在物理上必须是<strong>连续的</strong>；若采用<strong>非顺序存储</strong>，则各个数据元素在物理上可以是<strong>离散的</strong></em></p>
<p><em>2）数据的<strong>存储结构</strong>会<strong>影响存储空间分配的方便程度</strong></em></p>
<p><em>3）数据的<strong>存储结构</strong>会<strong>影响对数据运算的速度</strong>，例：在元素之间插入新元素</em></p>
<h2 id="第三节算法"><a href="#第三节算法" class="headerlink" title="第三节算法"></a>第三节算法</h2><p>——是对特定问题求解步骤的一种描述</p>
<p>五个特性：有穷性、确定性、可行性、输入、输出</p>
<p>“好”算法的特性：正确性、可读性、健壮性、高效率和低存储量需求</p>
<h3 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h3><p>——时间开销与问题规模n之间的关系</p>
<h3 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.空间复杂度"></a>2.空间复杂度</h3><p>——空间开销（内存开销）与问题规模n之间的关系</p>
<h1 id="第三章栈与队列"><a href="#第三章栈与队列" class="headerlink" title="第三章栈与队列"></a>第三章栈与队列</h1><h2 id="第三节堆栈和队列的应用"><a href="#第三节堆栈和队列的应用" class="headerlink" title="第三节堆栈和队列的应用"></a>第三节堆栈和队列的应用</h2><h3 id="1-表达式求值"><a href="#1-表达式求值" class="headerlink" title="1.表达式求值"></a>1.表达式求值</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="comment">//链栈存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    SElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span>* next;</span><br><span class="line">&#125;Node, * LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链栈初始化</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(LinkStack &amp;S)</span> </span>&#123;   <span class="comment">//构造空栈，栈顶指针置空</span></span><br><span class="line">    S = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链栈入栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(LinkStack &amp;S, SElemType e)</span> </span>&#123;<span class="comment">//栈顶插入元素e</span></span><br><span class="line">    LinkStack p = <span class="keyword">new</span> Node;    <span class="comment">//生成新节点</span></span><br><span class="line">    p-&gt;data = e;   <span class="comment">//新节点数据域置为e</span></span><br><span class="line">    p-&gt;next = S;   <span class="comment">//将新节点插入栈顶</span></span><br><span class="line">    S = p; <span class="comment">//修改栈顶指针为p</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链栈的出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(LinkStack &amp;S, SElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S == <span class="literal">NULL</span>) <span class="comment">//栈为空</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    LinkStack p;   <span class="comment">//定义临时链栈</span></span><br><span class="line">    e = S-&gt;data;   <span class="comment">//将栈顶元素赋值给e</span></span><br><span class="line">    p = S; <span class="comment">//临时存储栈顶空间，以备释放</span></span><br><span class="line">    S = S-&gt;next;   <span class="comment">//修改栈顶指针</span></span><br><span class="line">    <span class="keyword">delete</span> p;  <span class="comment">//删除栈顶指针</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取栈顶元素</span></span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(LinkStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S != <span class="literal">NULL</span>) <span class="comment">//栈非空</span></span><br><span class="line">        <span class="keyword">return</span> S-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断读入的字符ch是否为运算符</span></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(SElemType ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span> || ch == <span class="string">&#x27;(&#x27;</span> || ch == <span class="string">&#x27;)&#x27;</span>||ch==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断运算符栈顶元素与读入运算符ch的优先级</span></span><br><span class="line"><span class="function">SElemType <span class="title">Precede</span><span class="params">(SElemType a, SElemType b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;+&#x27;</span> || a == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="string">&#x27;+&#x27;</span> || b == <span class="string">&#x27;-&#x27;</span> || b == <span class="string">&#x27;#&#x27;</span> || b == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;*&#x27;</span> || a == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算函数</span></span><br><span class="line"><span class="function">SElemType <span class="title">Operate</span><span class="params">(SElemType a, SElemType t, SElemType b)</span> </span>&#123;<span class="comment">//进行运算的函数</span></span><br><span class="line">    <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//算法表达式求值的优先算法，设OPTR和OPND分别为运算符栈和操作数栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EvaluateExpression</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkStack OPND, OPTR;  <span class="comment">//定义栈</span></span><br><span class="line">    SElemType ch, t,t1,t2;</span><br><span class="line">    <span class="built_in">InitStack</span>(OPND);   <span class="comment">//初始化操作数栈</span></span><br><span class="line">    <span class="built_in">InitStack</span>(OPTR);   <span class="comment">//初始化运算符栈</span></span><br><span class="line">    <span class="built_in">Push</span>(OPTR,<span class="string">&#x27;#&#x27;</span>);    <span class="comment">//入栈</span></span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;#&#x27;</span> || <span class="built_in">GetTop</span>(OPTR) != <span class="string">&#x27;#&#x27;</span>) &#123;<span class="comment">//表达式没有扫描完毕或者OPTR栈顶不为‘#’时执行</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">In</span>(ch)) &#123; <span class="comment">//ch不是运算符</span></span><br><span class="line">            <span class="built_in">Push</span>(OPND, ch-<span class="string">&#x27;0&#x27;</span>);    <span class="comment">//进入OPND栈</span></span><br><span class="line">            cin &gt;&gt; ch; <span class="comment">//读取下一个字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="built_in">Precede</span>(<span class="built_in">GetTop</span>(OPTR), ch)) &#123;   <span class="comment">//比较OPTR栈顶元素和ch的优先级</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                    <span class="built_in">Push</span>(OPTR, ch);    <span class="comment">//将ch压入OPTR栈</span></span><br><span class="line">                    cin &gt;&gt; ch; <span class="comment">//读取下一个字符</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                    <span class="built_in">Pop</span>(OPTR, t);  <span class="comment">//弹出OPTR栈顶运算符，赋值给t</span></span><br><span class="line">                    <span class="built_in">Pop</span>(OPND, t2); <span class="comment">//后进先出</span></span><br><span class="line">                    <span class="built_in">Pop</span>(OPND, t1); <span class="comment">//弹出OPND栈顶两个运算数</span></span><br><span class="line">                    <span class="built_in">Push</span>(OPND, <span class="built_in">Operate</span>(t1, t, t2));    <span class="comment">//将运算结果压入OPND栈</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:  <span class="comment">//OPTR栈顶元素是&#x27;(&#x27;且ch是&#x27;)&#x27;</span></span><br><span class="line">                    <span class="built_in">Pop</span>(OPTR, t);  <span class="comment">//弹出栈顶&#x27;(&#x27;</span></span><br><span class="line">                    cin &gt;&gt; ch; <span class="comment">//读取下一个字符</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)<span class="built_in">GetTop</span>(OPND)&lt;&lt;endl; <span class="comment">//将char转换为int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaluateExpression</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-括号匹配问题"><a href="#2-括号匹配问题" class="headerlink" title="2.括号匹配问题"></a>2.括号匹配问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义栈</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_size 200<span class="comment">//栈的最大容量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> datatype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    datatype zhan[max_size];</span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//栈顶</span></span><br><span class="line">&#125;stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initial</span><span class="params">(stack &amp;st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st.top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型为datatype的x入栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(stack &amp;st, datatype x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当栈顶和max_size相等时，栈满</span></span><br><span class="line">    <span class="keyword">if</span>(st.top == max_size)&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;This stack has already full!&quot;;</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;no&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        st.zhan[st.top] = x;</span><br><span class="line">        st.top++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">pop</span><span class="params">(stack &amp;st)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st.top == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;This stack is empty!&quot;;</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;no&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        st.top--;</span><br><span class="line">        <span class="keyword">return</span> st.zhan[st.top];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stack s;</span><br><span class="line">    <span class="built_in">initial</span>(s);</span><br><span class="line">    <span class="comment">/*输入字符串，并将字符串放到字符数组中，</span></span><br><span class="line"><span class="comment">    实现能够逐个扫描字符串中的字符，并且不跳过空格符*/</span></span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">200</span>]=&#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(ch,str.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">//flag标志状态 1为括号匹配，0为不匹配</span></span><br><span class="line">    <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; ch[i]!=<span class="string">&#x27;\0&#x27;</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//元素若为&#123;，(，[则入栈</span></span><br><span class="line">        <span class="keyword">if</span>((ch[i] == <span class="string">&#x27;&#123;&#x27;</span> )|| (ch[i] ==<span class="string">&#x27;[&#x27;</span>) || (ch[i] ==<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">            <span class="built_in">push</span>(s, ch[i]);</span><br><span class="line">        &#125;<span class="comment">//元素若为&#125;，)，]则出栈 赋值给a</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((ch[i] == <span class="string">&#x27;&#125;&#x27;</span>) || (ch[i] ==<span class="string">&#x27;]&#x27;</span>) || (ch[i] ==<span class="string">&#x27;)&#x27;</span>))&#123;</span><br><span class="line">            <span class="type">char</span> a;</span><br><span class="line">            a = <span class="built_in">pop</span>(s);</span><br><span class="line">            <span class="comment">//若a与ch[i]匹配，进行下一个字符扫描</span></span><br><span class="line">            <span class="keyword">if</span>((a == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; ch[i] == <span class="string">&#x27;&#125;&#x27;</span>) || (a == <span class="string">&#x27;(&#x27;</span> &amp;&amp; ch[i] == <span class="string">&#x27;)&#x27;</span>) || (a == <span class="string">&#x27;[&#x27;</span> &amp;&amp; ch[i] == <span class="string">&#x27;]&#x27;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s.top != <span class="number">0</span>)&#123;    <span class="comment">//当左括号多出没有与右括号匹配的时候（如：&quot; &#123;() &quot;）</span></span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;no&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;yes&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-迷宫问题（栈，深度检索）"><a href="#3-迷宫问题（栈，深度检索）" class="headerlink" title="3.迷宫问题（栈，深度检索）"></a>3.迷宫问题（栈，深度检索）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW  6<span class="comment">//行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL  6<span class="comment">//列</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_Maze</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> map[ROW][COL];</span><br><span class="line">&#125;Maze;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_Postion</span><span class="comment">//地图中点的坐标,这个栈中存的元素就是点的坐标</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> _x;</span><br><span class="line">    <span class="type">int</span> _y;</span><br><span class="line">&#125;Postion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Postion DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_Stack</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType* top;</span><br><span class="line">    DataType* base;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.base = <span class="keyword">new</span> DataType[MAX_SIZE];</span><br><span class="line">    <span class="keyword">if</span> (!S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.top = S.base;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    *(S.top) = data;</span><br><span class="line">    S.top++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">popStack</span><span class="params">(Stack&amp; S,DataType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = *(--S.top);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="function">DataType* <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top - S.base == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//注意何时自增何时不自增</span></span><br><span class="line">    <span class="keyword">return</span> S.top<span class="number">-1</span>;<span class="comment">//返回栈顶元素的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destoryStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] S.base;</span><br><span class="line">        S.top = S.base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据给出给出的地图数据初始化结构体地图</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initMaze</span><span class="params">(Maze&amp; m, <span class="type">int</span> map[ROW][COL])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">            m.map[i][j] = map[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印迷宫(地图)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMaze</span><span class="params">(Maze&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++) &#123;</span><br><span class="line">            cout &lt;&lt; m.map[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是有效的入口</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValidEnter</span><span class="params">(Maze* m,Postion enter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(m);<span class="comment">//断言-里面的表达式为0直接终止程序,注意里面的内容是什么</span></span><br><span class="line">    <span class="comment">//只要入口在四个边界上就是合法的,并且是1(道路)</span></span><br><span class="line">    <span class="keyword">if</span> (((enter._x == <span class="number">0</span> || enter._x == ROW - <span class="number">1</span>) || (enter._y == <span class="number">0</span> || enter._y == COL - <span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前位置是否是出口</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isVaildExit</span><span class="params">(Maze* m, Postion cur, Postion enter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(m);</span><br><span class="line">    <span class="comment">//该结点不能是入口点，除了入口点，在边界上就是合法出口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((cur._x != enter._x || cur._y != enter._y) &amp;&amp; ((cur._x == <span class="number">0</span> || cur._x == ROW - <span class="number">1</span>) || (cur._y == <span class="number">0</span> || cur._y == COL - <span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前结点的下一个结点是否能走通-是不是可以走的点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNextPass</span><span class="params">(Maze* m, Postion cur, Postion next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(m);</span><br><span class="line">    <span class="comment">//判断next是不是cur的下一个结点</span></span><br><span class="line">    <span class="comment">//同一行相邻或者同一列相邻</span></span><br><span class="line">    <span class="keyword">if</span> (((next._x == cur._x) &amp;&amp; ((next._y == cur._y + <span class="number">1</span>) || (next._y == cur._y - <span class="number">1</span>)))</span><br><span class="line">        || ((next._y == cur._y) &amp;&amp; ((next._x = cur._x + <span class="number">1</span>) || (next._x = cur._x - <span class="number">1</span>))))</span><br><span class="line">        <span class="comment">//确实是cur的下一个结点(相邻的 )</span></span><br><span class="line">        <span class="comment">//判断这个点是不是在迷宫里</span></span><br><span class="line">        <span class="comment">//合法坐标并且那个位置的值是1</span></span><br><span class="line">        <span class="keyword">if</span> (((next._x &gt;= <span class="number">0</span> &amp;&amp; next._x &lt; ROW) &amp;&amp; (next._y &gt;= <span class="number">0</span> &amp;&amp; next._y &lt; COL))</span><br><span class="line">            &amp;&amp; (m-&gt;map[next._x][next._y] == <span class="number">1</span>))</span><br><span class="line">            <span class="comment">//最后的参数==1，不仅仅是看是否是可以走的位置(道路是1)，</span></span><br><span class="line">            <span class="comment">//同时有了这个我们就不用倒着往往前走了(不走重复的路)，不是有效的结点不只是墙(0)</span></span><br><span class="line">            <span class="comment">//走过的也不是有效结点，直接pop出栈，通过出栈来往前回退</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找迷宫通路</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">PassMaze</span><span class="params">(Maze* m, Postion enter, Stack&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(m &amp;&amp; <span class="built_in">isValidEnter</span>(m, enter));</span><br><span class="line"></span><br><span class="line">    Postion cur = enter;<span class="comment">//cur存储当前结点</span></span><br><span class="line">    Postion next;<span class="comment">//下一个结点，从入口开始出发向四周移动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//先将入口压入栈中</span></span><br><span class="line">    <span class="built_in">pushStack</span>(s, cur);</span><br><span class="line">    m-&gt;map[cur._x][cur._y] = <span class="number">2</span>;<span class="comment">//将入口值改为2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环求解-当栈中还有路径时</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isEmpty</span>(s))</span><br><span class="line">    &#123;</span><br><span class="line">        cur = *<span class="built_in">getTop</span>(s);<span class="comment">//取到栈顶元素</span></span><br><span class="line">        <span class="comment">//判断当前位置是否是出口</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isVaildExit</span>(m, cur, enter))<span class="comment">//注意参数传递顺序</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//是出口直接返回</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不是出口继续在周围判断</span></span><br><span class="line">        <span class="comment">//把cur当前刚才那个位置拿过来向四周判断</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先向左判断</span></span><br><span class="line">        next = cur;</span><br><span class="line">        next._y = cur._y - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNextPass</span>(m,cur,next))<span class="comment">//如果下一个结点走得通</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//走得通就走到那个位置-压进栈</span></span><br><span class="line">            <span class="built_in">pushStack</span>(s, next);</span><br><span class="line">            <span class="comment">//走过的位置-标记</span></span><br><span class="line">            m-&gt;map[next._x][next._y] = m-&gt;map[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//之后</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//走不通向另一个方向判断</span></span><br><span class="line">        <span class="comment">//向右走一步</span></span><br><span class="line">        next = cur;</span><br><span class="line">        next._y = cur._y + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNextPass</span>(m, cur, next))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pushStack</span>(s, next);</span><br><span class="line">            m-&gt;map[next._x][next._y] = m-&gt;map[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下走一步</span></span><br><span class="line">        next = cur;</span><br><span class="line">        next._x = cur._x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNextPass</span>(m, cur, next))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pushStack</span>(s, next);</span><br><span class="line">            m-&gt;map[next._x][next._y] = m-&gt;map[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上走一步</span></span><br><span class="line">        next = cur;</span><br><span class="line">        next._x = cur._x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNextPass</span>(m, cur, next))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pushStack</span>(s, next);</span><br><span class="line">            m-&gt;map[next._x][next._y] = m-&gt;map[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//走到这里说明此结点的四个方向都走不通</span></span><br><span class="line">        <span class="comment">//进行回溯</span></span><br><span class="line">        Postion tmp;<span class="comment">//没用 临时接收</span></span><br><span class="line">        <span class="built_in">popStack</span>(s, tmp);<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0-墙 1-路</span></span><br><span class="line">    <span class="type">int</span> map[ROW][COL] = &#123;</span><br><span class="line">            <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Maze m;<span class="comment">//创建一个迷宫(地图)</span></span><br><span class="line">    <span class="built_in">initMaze</span>(m, map);<span class="comment">//初始化迷宫</span></span><br><span class="line">    <span class="built_in">printMaze</span>(m);<span class="comment">//打印迷宫</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;_______&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迷宫入口</span></span><br><span class="line">    Postion enter;</span><br><span class="line">    enter._x = <span class="number">0</span>;</span><br><span class="line">    enter._y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义栈</span></span><br><span class="line">    Stack s;<span class="comment">//用于保存走过的轨迹，便于回溯</span></span><br><span class="line">    <span class="built_in">initStack</span>(s);<span class="comment">//初始化栈</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">PassMaze</span>(&amp;m, enter, s);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;有解&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无解&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printMaze</span>(m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-调度问题"><a href="#4-调度问题" class="headerlink" title="4.调度问题"></a>4.调度问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_task=<span class="number">10</span>;            	<span class="comment">//最大任务数</span></span><br><span class="line"><span class="type">int</span> n;                           	<span class="comment">//任务数</span></span><br><span class="line"><span class="type">int</span> a[max_task][<span class="number">2</span>];             	<span class="comment">//存储每个作业分别在机器1与机器2上的时间消耗</span></span><br><span class="line"><span class="type">int</span> result[max_task];          		<span class="comment">//存储排列树中的一条路径</span></span><br><span class="line"><span class="type">int</span> best_result[max_task];    		<span class="comment">//存储最优路径</span></span><br><span class="line"><span class="type">int</span> min=INF;                 		<span class="comment">//安排任务最小完成时间</span></span><br><span class="line"><span class="type">int</span> rop[max_task+<span class="number">1</span>];        		<span class="comment">//每个深度对应遍历进度</span></span><br><span class="line"><span class="type">int</span> finish[max_task+<span class="number">1</span>];    			<span class="comment">//每一层消耗时间和</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> result[max_task],<span class="type">int</span> best_result[max_task])</span>   <span class="comment">//复制数组</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        best_result[i]=result[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">allot_task</span><span class="params">(<span class="type">int</span> depth)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">bool</span> visited[max_task];    	<span class="comment">//标记已安排任务</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=rop[depth];i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])                 <span class="comment">//寻找该层未访问节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> f1=<span class="number">0</span>;                 	<span class="comment">//在机器一上的完成时间</span></span><br><span class="line">            <span class="type">int</span> f2=<span class="number">0</span>;                  	<span class="comment">//在机器二上的完成时间</span></span><br><span class="line">            rop[depth]=i+<span class="number">1</span>;           	<span class="comment">//更新该层访问进度</span></span><br><span class="line">            visited[i]=<span class="literal">true</span>;         	<span class="comment">//标记作业</span></span><br><span class="line">            result[depth<span class="number">-1</span>]=i;        	<span class="comment">//加入结果序列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    f1+=a[j][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            f2=f1+a[i][<span class="number">1</span>];            	<span class="comment">//该作业完成时间</span></span><br><span class="line">            <span class="keyword">if</span>(f2&lt;finish[depth<span class="number">-1</span>])    	<span class="comment">//该序列执行到此作业消耗时间</span></span><br><span class="line">                f2=finish[depth<span class="number">-1</span>];</span><br><span class="line">            finish[depth]=f2;</span><br><span class="line">            <span class="keyword">if</span>(depth==n)             	<span class="comment">//最后一个作业</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f2&lt;min)</span><br><span class="line">                &#123;</span><br><span class="line">                    min=f2;</span><br><span class="line">                    swap(result,best_result);      <span class="comment">//保存最优序列</span></span><br><span class="line">                &#125;</span><br><span class="line">                visited[i]=<span class="literal">false</span>;</span><br><span class="line">                rop[depth]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(depth&lt;n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f2&gt;min)</span><br><span class="line">                &#123;</span><br><span class="line">                    visited[i]=<span class="literal">false</span>;</span><br><span class="line">                    allot_task(depth<span class="number">-1</span>);     <span class="comment">//回溯</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    allot_task(depth+<span class="number">1</span>);      <span class="comment">//继续添加作业</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[rop[depth]<span class="number">-1</span>]=<span class="literal">false</span>;         <span class="comment">//跟换当前层次作业需要把之前作业解标记</span></span><br><span class="line">    &#125;</span><br><span class="line">    visited[rop[depth]<span class="number">-1</span>]=<span class="literal">false</span>;</span><br><span class="line">    rop[depth]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入任务数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;作业%d分别在机器1与机器2上运行时间：&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a[i][<span class="number">0</span>],&amp;a[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    allot_task(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最优调度序列为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,best_result[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n消耗时间为：%d\n&quot;</span>,min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="第四章串"><a href="#第四章串" class="headerlink" title="第四章串"></a>第四章串</h1><h2 id="第一节串的概念和存储结构"><a href="#第一节串的概念和存储结构" class="headerlink" title="第一节串的概念和存储结构"></a>第一节串的概念和存储结构</h2><h3 id="1-串的概念"><a href="#1-串的概念" class="headerlink" title="1.串的概念"></a>1.串的概念</h3><p>​	由0个或多个字符组成的有效序列，一般记作<br>$$<br>S&#x3D;’a_1a_2a_3…a_n’~~~（n≥0）<br>$$</p>
<h3 id="2-串的存储结构和基本算法的实现"><a href="#2-串的存储结构和基本算法的实现" class="headerlink" title="2.串的存储结构和基本算法的实现"></a>2.串的存储结构和基本算法的实现</h3><h4 id="（1）定长顺序存储表示"><a href="#（1）定长顺序存储表示" class="headerlink" title="（1）定长顺序存储表示"></a>（1）定长顺序存储表示</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255		<span class="comment">//预定义最大串长255</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">	<span class="type">char</span> ch[MAXLEN];		<span class="comment">//每个分量存储一个字符</span></span><br><span class="line">	<span class="type">int</span> length;				<span class="comment">//串的实际长度</span></span><br><span class="line">&#125;SString;</span><br></pre></td></tr></table></figure>

<h4 id="（2）堆分配存储表示"><a href="#（2）堆分配存储表示" class="headerlink" title="（2）堆分配存储表示"></a>（2）堆分配存储表示</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> *ch;		<span class="comment">//按串长分配存储区，ch指向串的基地址</span></span><br><span class="line">    <span class="type">int</span> length;		<span class="comment">//串的长度</span></span><br><span class="line">&#125;HString;</span><br></pre></td></tr></table></figure>

<h4 id="（3）基本操作"><a href="#（3）基本操作" class="headerlink" title="（3）基本操作"></a>（3）基本操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">StrAssign</span>(&amp;T,chars)：赋值操作。把串T赋值为chars。</span><br><span class="line"><span class="built_in">StrCopy</span>(&amp;T,S)：复制操作。由串S复制得到串T。</span><br><span class="line"><span class="built_in">StrEmpty</span>(S)：判空操作。若S为空串，则返回TRUE，否则返回FALSE。</span><br><span class="line"><span class="built_in">StrLength</span>(S)：求串长。返回串S的元素个数。</span><br><span class="line"><span class="built_in">ClearString</span>(&amp;S)：清空操作。将S清为空串。</span><br><span class="line"><span class="built_in">Concat</span>(&amp;T,S1,S2)：串联接。用T返回由S1和S2联接而成的新串</span><br><span class="line"><span class="built_in">SubString</span>(&amp;Sub,S,pos,len)：求子串。用Sub返回串S的第pos个字符起长度为len的子串。</span><br><span class="line"><span class="built_in">Index</span>(S,T)：定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为<span class="number">0</span>。</span><br><span class="line"><span class="built_in">StrCompare</span>(S,T)：比较操作。若S&gt;T，则返回值&gt;<span class="number">0</span>；若S=T，则返回值=<span class="number">0</span>；若S&lt;T，则返回值&lt;<span class="number">0</span>。</span><br><span class="line"><span class="built_in">DestroyString</span>(&amp;S)：销毁中。将串S销毁。</span><br></pre></td></tr></table></figure>

<h2 id="第二节串的匹配算法"><a href="#第二节串的匹配算法" class="headerlink" title="第二节串的匹配算法"></a>第二节串的匹配算法</h2><h3 id="1-BF算法（简单模式匹配算法）"><a href="#1-BF算法（简单模式匹配算法）" class="headerlink" title="1.BF算法（简单模式匹配算法）"></a>1.BF算法（简单模式匹配算法）</h3><p>时间复杂度：最好O（n），最坏O（nm）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BF</span><span class="params">(string S,string T,<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = pos;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &lt;= S.<span class="built_in">size</span>() &amp;&amp; j &lt;= T.<span class="built_in">size</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( S[i<span class="number">-1</span>] == T[j<span class="number">-1</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = i-j+<span class="number">2</span>;<span class="comment">//i为母串S的匹配失败的位置，j为模式串S的匹配失败的位置，i-j为S第一次匹配位置之前的长度，</span></span><br><span class="line">            <span class="comment">//+2的原因是一个1是本次匹配的开始位置 ，另一个1是下一次匹配的开始位置。</span></span><br><span class="line">            j = <span class="number">1</span>;<span class="comment">//模式串的下一次匹配开始位置依旧是第一个字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( j &gt; T.<span class="built_in">size</span>() )</span><br><span class="line">        <span class="keyword">return</span> i - T.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    string S,T;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入母串：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;S;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入模式串：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;T;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入在母串中开始寻找的位置（小于等于&quot;</span>&lt;&lt;S.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;）：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;pos;</span><br><span class="line">        <span class="keyword">while</span> ( pos &gt; S.<span class="built_in">size</span>() )</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;请重新输入在母串中开始寻找的位置（小于等于&quot;</span>&lt;&lt;S.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;）：&quot;</span>;</span><br><span class="line">            cin&gt;&gt;pos;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;模式串在自母串第 &quot;</span>&lt;&lt;pos&lt;&lt;<span class="string">&quot; 位开始出现的位置为 &quot;</span>&lt;&lt;<span class="built_in">BF</span>(S,T,pos)&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2.KMP算法"></a>2.KMP算法</h3><h4 id="（1）next数组"><a href="#（1）next数组" class="headerlink" title="（1）next数组"></a>（1）next数组</h4><p>以‘ababa’举例说明：</p>
<ul>
<li>‘a’的前缀和后缀都是空集，最长相等前后缀长度为0；</li>
<li>‘ab’的前缀为{a}，后缀为{b}，{a}且{b}&#x3D;空集，最长相等前后缀长度为0；</li>
<li>‘aba’的前缀是{a,ab}，后缀是{a,ba}，{a,ab}且{a,ba}&#x3D;{a}，最长相等前后缀长度为1；</li>
<li>‘abab’的前缀是{a,ab,aba}，后缀是{a,ba,bab}，{a,ab,aba}且{a,ba,bab}&#x3D;{a}，最长相等前后缀长度为1；</li>
<li>‘ababa’的前缀是{a,ab,aba,abab}，后缀是{a,ba,aba,baba}，{a,ab,aba,abab}且{a,ba,aba,baba}&#x3D;{a,aba}，最长相等前后缀长度为3；</li>
</ul>
<p>时间复杂度：O（n+m）；优点：主串不回溯</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Next</span><span class="params">(<span class="type">char</span>*T,<span class="type">int</span> *next)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="built_in">strlen</span>(T)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">0</span>||T[i<span class="number">-1</span>]==T[j<span class="number">-1</span>]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            next[i]=j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j=next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">KMP</span><span class="params">(<span class="type">char</span> * S,<span class="type">char</span> * T)</span>&#123;</span><br><span class="line">    <span class="type">int</span> next[<span class="number">10</span>];</span><br><span class="line">    Next(T,next);<span class="comment">//根据模式串T,初始化next数组</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(S)&amp;&amp;j&lt;=<span class="built_in">strlen</span>(T)) &#123;</span><br><span class="line">        <span class="comment">//j==0:代表模式串的第一个字符就和当前测试的字符不相等；S[i-1]==T[j-1],如果对应位置字符相等，两种情况下，指向当前测试的两个指针下标i和j都向后移</span></span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">0</span> || S[i<span class="number">-1</span>]==T[j<span class="number">-1</span>]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j=next[j];<span class="comment">//如果测试的两个字符不相等，i不动，j变为当前测试字符串的next值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j&gt;<span class="built_in">strlen</span>(T)) &#123;<span class="comment">//如果条件为真，说明匹配成功</span></span><br><span class="line">        <span class="keyword">return</span> i-(<span class="type">int</span>)<span class="built_in">strlen</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=KMP(<span class="string">&quot;ababcabcacbab&quot;</span>,<span class="string">&quot;abcac&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）nextval数组"><a href="#（2）nextval数组" class="headerlink" title="（2）nextval数组"></a>（2）nextval数组</h4><table>
<thead>
<tr>
<th align="center">j</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">9</th>
</tr>
</thead>
<tbody><tr>
<td align="center">模式串T</td>
<td align="center">a</td>
<td align="center">b</td>
<td align="center">a</td>
<td align="center">b</td>
<td align="center">a</td>
<td align="center">a</td>
<td align="center">a</td>
<td align="center">b</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">next</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">4</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">nextval</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">4</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
